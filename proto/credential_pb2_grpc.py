# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import credential_pb2 as credential__pb2


class CredentialServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/CredentialService/Register',
                request_serializer=credential__pb2.Credential.SerializeToString,
                response_deserializer=credential__pb2.Empty.FromString,
                )
        self.Login = channel.unary_unary(
                '/CredentialService/Login',
                request_serializer=credential__pb2.Credential.SerializeToString,
                response_deserializer=credential__pb2.Token.FromString,
                )
        self.GetById = channel.unary_unary(
                '/CredentialService/GetById',
                request_serializer=credential__pb2.CredentialId.SerializeToString,
                response_deserializer=credential__pb2.CredentialResponse.FromString,
                )
        self.GetByEmail = channel.unary_unary(
                '/CredentialService/GetByEmail',
                request_serializer=credential__pb2.CredentialEmail.SerializeToString,
                response_deserializer=credential__pb2.CredentialResponse.FromString,
                )
        self.GetActive = channel.unary_unary(
                '/CredentialService/GetActive',
                request_serializer=credential__pb2.Token.SerializeToString,
                response_deserializer=credential__pb2.ActiveResponse.FromString,
                )
        self.UpdateEmail = channel.unary_unary(
                '/CredentialService/UpdateEmail',
                request_serializer=credential__pb2.EmailUpdate.SerializeToString,
                response_deserializer=credential__pb2.Empty.FromString,
                )
        self.UpdatePassword = channel.unary_unary(
                '/CredentialService/UpdatePassword',
                request_serializer=credential__pb2.PasswordUpdate.SerializeToString,
                response_deserializer=credential__pb2.Empty.FromString,
                )
        self.Deactivate = channel.unary_unary(
                '/CredentialService/Deactivate',
                request_serializer=credential__pb2.Token.SerializeToString,
                response_deserializer=credential__pb2.Empty.FromString,
                )
        self.Delete = channel.unary_unary(
                '/CredentialService/Delete',
                request_serializer=credential__pb2.Token.SerializeToString,
                response_deserializer=credential__pb2.Empty.FromString,
                )
        self.ValidateToken = channel.unary_unary(
                '/CredentialService/ValidateToken',
                request_serializer=credential__pb2.Token.SerializeToString,
                response_deserializer=credential__pb2.ValidateResponse.FromString,
                )
        self.RefreshToken = channel.unary_unary(
                '/CredentialService/RefreshToken',
                request_serializer=credential__pb2.TokenRefresh.SerializeToString,
                response_deserializer=credential__pb2.Token.FromString,
                )
        self.CheckAuthority = channel.unary_unary(
                '/CredentialService/CheckAuthority',
                request_serializer=credential__pb2.Token.SerializeToString,
                response_deserializer=credential__pb2.ValidateResponse.FromString,
                )


class CredentialServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetByEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deactivate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckAuthority(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CredentialServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=credential__pb2.Credential.FromString,
                    response_serializer=credential__pb2.Empty.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=credential__pb2.Credential.FromString,
                    response_serializer=credential__pb2.Token.SerializeToString,
            ),
            'GetById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetById,
                    request_deserializer=credential__pb2.CredentialId.FromString,
                    response_serializer=credential__pb2.CredentialResponse.SerializeToString,
            ),
            'GetByEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByEmail,
                    request_deserializer=credential__pb2.CredentialEmail.FromString,
                    response_serializer=credential__pb2.CredentialResponse.SerializeToString,
            ),
            'GetActive': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActive,
                    request_deserializer=credential__pb2.Token.FromString,
                    response_serializer=credential__pb2.ActiveResponse.SerializeToString,
            ),
            'UpdateEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEmail,
                    request_deserializer=credential__pb2.EmailUpdate.FromString,
                    response_serializer=credential__pb2.Empty.SerializeToString,
            ),
            'UpdatePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePassword,
                    request_deserializer=credential__pb2.PasswordUpdate.FromString,
                    response_serializer=credential__pb2.Empty.SerializeToString,
            ),
            'Deactivate': grpc.unary_unary_rpc_method_handler(
                    servicer.Deactivate,
                    request_deserializer=credential__pb2.Token.FromString,
                    response_serializer=credential__pb2.Empty.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=credential__pb2.Token.FromString,
                    response_serializer=credential__pb2.Empty.SerializeToString,
            ),
            'ValidateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateToken,
                    request_deserializer=credential__pb2.Token.FromString,
                    response_serializer=credential__pb2.ValidateResponse.SerializeToString,
            ),
            'RefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshToken,
                    request_deserializer=credential__pb2.TokenRefresh.FromString,
                    response_serializer=credential__pb2.Token.SerializeToString,
            ),
            'CheckAuthority': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckAuthority,
                    request_deserializer=credential__pb2.Token.FromString,
                    response_serializer=credential__pb2.ValidateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CredentialService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CredentialService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/Register',
            credential__pb2.Credential.SerializeToString,
            credential__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/Login',
            credential__pb2.Credential.SerializeToString,
            credential__pb2.Token.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/GetById',
            credential__pb2.CredentialId.SerializeToString,
            credential__pb2.CredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetByEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/GetByEmail',
            credential__pb2.CredentialEmail.SerializeToString,
            credential__pb2.CredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/GetActive',
            credential__pb2.Token.SerializeToString,
            credential__pb2.ActiveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/UpdateEmail',
            credential__pb2.EmailUpdate.SerializeToString,
            credential__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/UpdatePassword',
            credential__pb2.PasswordUpdate.SerializeToString,
            credential__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Deactivate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/Deactivate',
            credential__pb2.Token.SerializeToString,
            credential__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/Delete',
            credential__pb2.Token.SerializeToString,
            credential__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/ValidateToken',
            credential__pb2.Token.SerializeToString,
            credential__pb2.ValidateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/RefreshToken',
            credential__pb2.TokenRefresh.SerializeToString,
            credential__pb2.Token.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckAuthority(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CredentialService/CheckAuthority',
            credential__pb2.Token.SerializeToString,
            credential__pb2.ValidateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
